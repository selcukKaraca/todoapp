apiVersion: v1
kind: Secret
metadata:
  name: todo-secret
type: Opaque
#here, instead of stringData we may use data and encoded base64 values. for the sake of simplicity we used stringData
stringData:
  username: taskuser
  password: taskpass
  dbname: TASKDB

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: todo
  name: todo
spec:
  replicas: 3
  selector:
    matchLabels:
      app: todo
  
  template:
    metadata:
      labels:
        app: todo
    spec:
      containers:
      - image: docker.io/mskaraca/todoapp:v1.0
        name: todo
        #we mount secrets as env variables and inside our app, we initialize our variables from shell environment
        env:
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: todo-secret
              key: username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: todo-secret
              key: password
        - name: DBNAME
          valueFrom:
            secretKeyRef:
              name: todo-secret
              key: dbname


---

apiVersion: v1
kind: Service
metadata:
   name: todo
spec:
   #if you have an ingress controller, you may use ClusterIP type here and access service over ingress resource (you should define it)
   type: LoadBalancer
   selector:
      app: todo
   ports:
   # service will listen in port 80 and forward requests to port 5000, flask def port..
   - port: 80
     targetPort: 5000